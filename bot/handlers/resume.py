# bot/handlers/resume.py

import uuid
import asyncio
import logging
from pathlib import Path

from aiogram import Router, F
from aiogram.types import Message
from aiogram import Bot

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
TMP_DIR = Path("tmp")
TMP_DIR.mkdir(exist_ok=True)


@router.message(F.document.mime_type == "application/pdf")
async def resume_handler(message: Message, bot: Bot) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç PDF-—Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É,
    –ø–∞—Ä—Å–∏—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏.
    """
    logger.info("=" * 50)
    logger.info("–ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ó–Æ–ú–ï (PDF)")
    logger.info(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id if message.from_user else 'Unknown'}")
    logger.info(f"–ò–º—è —Ñ–∞–π–ª–∞: {message.document.file_name if message.document else 'None'}")
    
    await process_resume(message, bot)


@router.message(F.document)
async def any_document_handler(message: Message, bot: Bot) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ PDF
    """
    logger.info("=" * 50)
    logger.info("–û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –î–û–ö–£–ú–ï–ù–¢–û–í")
    logger.info(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id if message.from_user else 'Unknown'}")
    logger.info(f"–ò–º—è —Ñ–∞–π–ª–∞: {message.document.file_name if message.document else 'None'}")
    logger.info(f"MIME —Ç–∏–ø: {message.document.mime_type if message.document else 'None'}")
    
    if not message.document:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PDF
    if message.document.mime_type == "application/pdf":
        logger.info("‚úÖ –≠—Ç–æ PDF —Ñ–∞–π–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–∫ —Ä–µ–∑—é–º–µ")
        await process_resume(message, bot)
    else:
        logger.info(f"‚ùå –ù–µ PDF —Ñ–∞–π–ª: {message.document.mime_type}")
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n\n"
            f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Ç–∏–ø–∞: {message.document.mime_type}"
        )


async def process_resume(message: Message, bot: Bot) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ
    """
    if not message.document:
        logger.error("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω PDF –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try:
        processing_msg = await message.answer(
            "üìÑ –†–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
        )
        logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
        
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–ª–ª–∏–∑–∏–π
    tmp_path = TMP_DIR / f"{uuid.uuid4()}.pdf"
    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å: {tmp_path}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤ tmp/
        logger.info("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É PDF —Ñ–∞–π–ª–∞...")
        await bot.download(message.document, destination=tmp_path)
        logger.info("‚úÖ PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if not tmp_path.exists():
            raise FileNotFoundError("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        file_size = tmp_path.stat().st_size
        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        if file_size == 0:
            raise ValueError("–§–∞–π–ª –ø—É—Å—Ç–æ–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await processing_msg.edit_text(
                "üìÑ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ò–∑–≤–ª–µ–∫–∞—é –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏..."
            )
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        logger.info("–ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤...")
        
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å skills_extractor
        try:
            logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä—É—é skills_extractor...")
            from core.skills_extractor import skills_extractor
            logger.info("‚úÖ –ú–æ–¥—É–ª—å skills_extractor —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ PDF
            logger.info("–í—ã–∑—ã–≤–∞—é extract_skills_from_pdf...")
            skills = skills_extractor.extract_skills_from_pdf(str(tmp_path))
            logger.info(f"‚úÖ –ù–∞–≤—ã–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã: {len(skills) if skills else 0} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if skills:
                logger.info("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏...")
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏
                all_skills = skills_extractor.get_top_skills(skills, 1000)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                skills_details = []
                category_names = {
                    'programming_languages': 'üíª –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
                    'frameworks_libraries': 'üîß –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏',
                    'databases': 'üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                    'cloud_platforms': '‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
                    'tools_technologies': 'üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                    'methodologies': 'üìã –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏',
                    'soft_skills': 'ü§ù Soft skills'
                }
                
                for category, skill_list in skills.items():
                    if skill_list:
                        category_name = category_names.get(category, category)
                        skills_details.append(f"\n{category_name}:")
                        for skill in skill_list:
                            skills_details.append(f"  ‚Ä¢ {skill}")
                
                response_text = (
                    "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
                    "üîç **–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:**\n"
                    f"{''.join(skills_details)}\n\n"
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {len(all_skills)}\n"
                    f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(skills)}\n\n"
                    "üí° –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –Ω–∞–≤—ã–∫–æ–≤!"
                )
                
                logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
            else:
                logger.warning("–ù–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ...")
                response_text = (
                    "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
                    "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ —Ä–µ–∑—é–º–µ.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, "
                    "—á—Ç–æ —Ç–µ–∫—Å—Ç –≤ PDF –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."
                )
            
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ skills_extractor: {e}")
            response_text = (
                "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                "‚ö†Ô∏è –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
        try:
            await processing_msg.edit_text(response_text)
            logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer(response_text)
                logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
            except Exception as e2:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ.\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."
        )
        
        try:
            await processing_msg.edit_text(error_text)
        except Exception as edit_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            try:
                await message.answer(error_text)
            except Exception as send_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_error}")
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if tmp_path.exists():
                tmp_path.unlink()
                logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
    
    logger.info("–ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ó–Æ–ú–ï")
    logger.info("=" * 50)
            