# bot/handlers/resume.py

import uuid
import logging
from pathlib import Path
import datetime

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import types
import httpx
from aiogram.exceptions import TelegramBadRequest

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
TMP_DIR = Path("tmp")
TMP_DIR.mkdir(exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
class ResumeStates(StatesGroup):
    editing_skills = State()
    waiting_new_skill = State()


@router.message(F.document.mime_type == "application/pdf")
async def resume_handler(message: Message, bot: Bot, state: FSMContext) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç PDF-—Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É,
    –ø–∞—Ä—Å–∏—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏.
    """
    logger.info("=" * 50)
    logger.info("–ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ó–Æ–ú–ï (PDF)")
    logger.info(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id if message.from_user else 'Unknown'}")
    logger.info(f"–ò–º—è —Ñ–∞–π–ª–∞: {message.document.file_name if message.document else 'None'}")
    
    await process_resume(message, bot, state)


@router.message(F.document)
async def any_document_handler(message: Message, bot: Bot, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ PDF
    """
    logger.info("=" * 50)
    logger.info("–û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –î–û–ö–£–ú–ï–ù–¢–û–í")
    logger.info(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id if message.from_user else 'Unknown'}")
    logger.info(f"–ò–º—è —Ñ–∞–π–ª–∞: {message.document.file_name if message.document else 'None'}")
    logger.info(f"MIME —Ç–∏–ø: {message.document.mime_type if message.document else 'None'}")
    
    if not message.document:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PDF
    if message.document.mime_type == "application/pdf":
        logger.info("‚úÖ –≠—Ç–æ PDF —Ñ–∞–π–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–∫ —Ä–µ–∑—é–º–µ")
        await process_resume(message, bot, state)
    else:
        logger.info(f"‚ùå –ù–µ PDF —Ñ–∞–π–ª: {message.document.mime_type}")
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.\n\n"
            f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Ç–∏–ø–∞: {message.document.mime_type}"
        )


async def process_resume(message: Message, bot: Bot, state: FSMContext) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ
    """
    if not message.document:
        logger.error("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω PDF –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try:
        processing_msg = await message.answer(
            "üìÑ –†–µ–∑—é–º–µ –ø–æ–ª—É—á–µ–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
        )
        logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return
        
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–ª–ª–∏–∑–∏–π
    tmp_path = TMP_DIR / f"{uuid.uuid4()}.pdf"
    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å: {tmp_path}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤ tmp/
        logger.info("–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É PDF —Ñ–∞–π–ª–∞...")
        await bot.download(message.document, destination=tmp_path)
        logger.info("‚úÖ PDF —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if not tmp_path.exists():
            raise FileNotFoundError("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        file_size = tmp_path.stat().st_size
        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        if file_size == 0:
            raise ValueError("–§–∞–π–ª –ø—É—Å—Ç–æ–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await processing_msg.edit_text(
                "üìÑ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –ò–∑–≤–ª–µ–∫–∞—é –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏..."
            )
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        logger.info("–ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤...")
        
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å skills_extractor
        try:
            logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä—É—é skills_extractor...")
            from core.skills_extractor import skills_extractor
            logger.info("‚úÖ –ú–æ–¥—É–ª—å skills_extractor —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ PDF
            logger.info("–í—ã–∑—ã–≤–∞—é extract_skills_from_pdf...")
            skills_result = skills_extractor.extract_skills_from_pdf(str(tmp_path))
            logger.info(f"‚úÖ –ù–∞–≤—ã–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã: {len(skills_result) if skills_result else 0} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç skills_extractor: {skills_result}")

            skills_set = set()
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–∏ skillner/keybert/dict ‚Äî —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            if any(k in skills_result for k in ("skillner", "keybert", "dict")):
                for key in ("skillner", "keybert"):
                    logger.info(f"–ù–∞–≤—ã–∫–∏ –∏–∑ {key}: {skills_result.get(key, [])}")
                    skills_set.update(skills_result.get(key, []))
                dict_skills = skills_result.get("dict", {})
                logger.info(f"–ù–∞–≤—ã–∫–∏ –∏–∑ dict: {dict_skills}")
                if isinstance(dict_skills, dict):
                    for cat_skills in dict_skills.values():
                        skills_set.update(cat_skills)
            else:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: —Å—Ä–∞–∑—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                for cat, cat_skills in skills_result.items():
                    logger.info(f"–ù–∞–≤—ã–∫–∏ –∏–∑ {cat}: {cat_skills}")
                    if isinstance(cat_skills, list):
                        skills_set.update(cat_skills)
            skills_list = sorted(skills_set)
            logger.info(f"–û–±—â–∏–π –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤: {skills_list}")

            # Fallback: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not skills_list:
                await processing_msg.edit_text(
                    "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å –Ω–∞–≤—ã–∫–∏ –∏–∑ —Ä–µ–∑—é–º–µ.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
                    "\n–í—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –∏—Ö –≤ –æ—Ç–≤–µ—Ç.",
                    parse_mode="HTML"
                )
                await state.update_data(user_skills=[])
                await state.set_state(ResumeStates.editing_skills)
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≤—ã–∫–∏ –≤ FSM
            await state.update_data(user_skills=skills_list)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            skills_text = "\n".join(f"‚Ä¢ {s}" for s in skills_list) if skills_list else "(–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)"
            edit_text = (
                "üîç <b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:</b>\n"
                f"{skills_text}\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞–º–∏:</b>\n"
                "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫\n"
                "‚ûñ <b>–£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞\n"
                "‚úÖ <b>–ì–æ—Ç–æ–≤–æ</b> ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
                "üîç <b>–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏</b> ‚Äî –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –Ω–∞–≤—ã–∫–∞–º"
            )
            await processing_msg.edit_text(edit_text, parse_mode="HTML", reply_markup=get_skills_keyboard(skills_list))
            await state.set_state(ResumeStates.editing_skills)
            return  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if skills:
                logger.info("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏...")
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏
                all_skills = skills_extractor.get_top_skills(skills, 1000)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                skills_details = []
                category_names = {
                    'programming_languages': 'üíª –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è',
                    'frameworks_libraries': 'üîß –§—Ä–µ–π–º–≤–æ—Ä–∫–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏',
                    'databases': 'üóÑÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                    'cloud_platforms': '‚òÅÔ∏è –û–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
                    'tools_technologies': 'üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
                    'methodologies': 'üìã –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏',
                    'soft_skills': 'ü§ù Soft skills'
                }
                
                for category, skill_list in skills.items():
                    if skill_list:
                        category_name = category_names.get(category, category)
                        skills_details.append(f"\n{category_name}:")
                        for skill in skill_list:
                            skills_details.append(f"  ‚Ä¢ {skill}")
                
                response_text = (
                    "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
                    "üîç **–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:**\n"
                    f"{''.join(skills_details)}\n\n"
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–≤—ã–∫–æ–≤: {len(all_skills)}\n"
                    f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(skills)}\n\n"
                    "üí° –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –Ω–∞–≤—ã–∫–æ–≤!"
                )
                
                logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
            else:
                logger.warning("–ù–∞–≤—ã–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ...")
                response_text = (
                    "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n"
                    "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ —Ä–µ–∑—é–º–µ.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–∑—é–º–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, "
                    "—á—Ç–æ —Ç–µ–∫—Å—Ç –≤ PDF –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."
                )
            
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ skills_extractor: {e}")
            response_text = (
                "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                "‚ö†Ô∏è –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≤—ã–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
        try:
            await processing_msg.edit_text(response_text)
            logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.answer(response_text)
                logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
            except Exception as e2:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ.\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            "üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º."
        )
        
        try:
            await processing_msg.edit_text(error_text)
        except Exception as edit_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}")
            try:
                await message.answer(error_text)
            except Exception as send_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_error}")
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if tmp_path.exists():
                tmp_path.unlink()
                logger.info("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
    
    logger.info("–ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –†–ï–ó–Æ–ú–ï")
    logger.info("=" * 50)

VACANCIES_PER_PAGE = 5
VACANCIES_FETCH_LIMIT = 50

async def search_hh_vacancies(skills, area=113, per_page=VACANCIES_FETCH_LIMIT, page=0):
    # skills –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ —Å–ø–∏—Å–∫–æ–º, –ª–∏–±–æ —Å–ª–æ–≤–∞—Ä—ë–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    if isinstance(skills, dict):
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è > –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã > —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
        for cat in ["programming_languages", "tools_technologies", "frameworks_libraries"]:
            if cat in skills and skills[cat]:
                query_skills = skills[cat][:2]
                break
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º –ª—é–±—ã–µ –Ω–∞–≤—ã–∫–∏
            all_skills = []
            for v in skills.values():
                all_skills.extend(v)
            query_skills = all_skills[:2]
    else:
        # –ï—Å–ª–∏ skills ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫
        query_skills = skills[:2] if skills else []
    query = " ".join(query_skills)
    url = "https://api.hh.ru/vacancies"
    params = {
        "text": query,
        "area": area,
        "per_page": per_page,
        "page": 0,  # –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        "order_by": "relevance"
    }
    async with httpx.AsyncClient() as client:
        resp = await client.get(url, params=params)
        resp.raise_for_status()
        data = resp.json()
        return data.get("items", []), data.get("pages", 1)

async def send_hh_vacancies(message_or_callback, state: FSMContext, page=0):
    data = await state.get_data()
    skills = data.get("user_skills", []) or []
    logger.info(f"–ù–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞: {skills}")
    user_skills = [s.lower() for s in skills] if isinstance(skills, list) else [s.lower() for v in skills.values() for s in v]
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ, –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑ FSM
    if page == 0 or not data.get("sorted_vacancies"):
        try:
            vacancies, _ = await search_hh_vacancies(skills, per_page=VACANCIES_FETCH_LIMIT)
            logger.info(f"–í–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru: {vacancies}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ hh.ru: {e}")
            await message_or_callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        if not vacancies:
            await message_or_callback.answer("–í–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤–∞—à–∏–º –Ω–∞–≤—ã–∫–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ hh.ru. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏.")
            return
        def count_and_list_matches(vac):
            text = (vac.get("name", "") + " " +
                    (vac.get("snippet", {}).get("requirement", "") or "") + " " +
                    (vac.get("snippet", {}).get("responsibility", "") or "")
            ).lower()
            matched = [skill for skill in user_skills if skill in text]
            return len(matched), matched
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–ø–∞–≤—à–∏–µ –Ω–∞–≤—ã–∫–∏
        vac_with_matches = []
        for v in vacancies:
            count, matched = count_and_list_matches(v)
            v["_match_count"] = count
            v["_matched_skills"] = matched
            vac_with_matches.append(v)
        vac_with_matches.sort(key=lambda v: v["_match_count"], reverse=True)
        await state.update_data(sorted_vacancies=vac_with_matches, hh_page=page)
    else:
        vac_with_matches = data["sorted_vacancies"]
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ 5 –≤–∞–∫–∞–Ω—Å–∏–π
    start = page * VACANCIES_PER_PAGE
    end = start + VACANCIES_PER_PAGE
    page_vacancies = vac_with_matches[start:end]
    if not page_vacancies:
        await message_or_callback.answer("–ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    total_pages = (len(vac_with_matches) + VACANCIES_PER_PAGE - 1) // VACANCIES_PER_PAGE
    msg = f"<b>–¢–æ–ø –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ hh.ru –ø–æ –≤–∞—à–∏–º –Ω–∞–≤—ã–∫–∞–º (—Å—Ç—Ä. {page+1}/{total_pages}):</b>\n\n"
    for v in page_vacancies:
        name = v.get("name", "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)")
        employer = v.get("employer", {}).get("name", "")
        url = v.get("alternate_url", "")
        salary = v.get("salary")
        snippet = v.get("snippet", {})
        snippet_text = snippet.get("responsibility") or snippet.get("requirement") or ""
        published_at = v.get("published_at")
        published_str = ""
        if published_at:
            try:
                dt = datetime.datetime.fromisoformat(published_at.replace("Z", "+00:00"))
                published_str = dt.strftime("%d.%m.%Y")
            except Exception:
                published_str = published_at[:10]
        if snippet_text:
            snippet_text = snippet_text.replace('<highlighttext>', '<b>').replace('</highlighttext>', '</b>')
        if salary:
            if salary.get("from") and salary.get("to"):
                salary_str = f"{salary['from']}‚Äì{salary['to']} {salary.get('currency', '')}"
            elif salary.get("from"):
                salary_str = f"–æ—Ç {salary['from']} {salary.get('currency', '')}"
            elif salary.get("to"):
                salary_str = f"–¥–æ {salary['to']} {salary.get('currency', '')}"
            else:
                salary_str = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            salary_str = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        match_count = v.get("_match_count", 0)
        matched_skills = v.get("_matched_skills", [])
        msg += f"<b>{name}</b>\n"
        if employer:
            msg += f"–ö–æ–º–ø–∞–Ω–∏—è: {employer}\n"
        if published_str:
            msg += f"üóìÔ∏è –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {published_str}\n"
        msg += f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_str}\n"
        msg += f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º: <b>{match_count}</b>\n"
        if matched_skills:
            msg += f"<i>–°–æ–≤–ø–∞–≤—à–∏–µ –Ω–∞–≤—ã–∫–∏: {', '.join(matched_skills)}</i>\n"
        if snippet_text:
            msg += f"<i>{snippet_text}</i>\n"
        msg += f"<a href='{url}'>–û—Ç–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</a>\n\n"
    # –ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë', –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    keyboard = None
    if end < len(vac_with_matches):
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data=f"more_jobs:{page+1}")]]
        )
    try:
        await message_or_callback.answer(msg, parse_mode="HTML", disable_web_page_preview=True, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        await message_or_callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.update_data(hh_page=page)

@router.callback_query(lambda c: c.data == "search_jobs", ResumeStates.editing_skills)
async def search_jobs_handler(callback: types.CallbackQuery, state: FSMContext):
    logger.info("–ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –ü–û–ò–°–ö–ê –í–ê–ö–ê–ù–°–ò–ô")
    await callback.answer("–ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ hh.ru –ø–æ –≤–∞—à–∏–º –Ω–∞–≤—ã–∫–∞–º...", show_alert=False)
    await send_hh_vacancies(callback.message, state, page=0)

@router.callback_query(lambda c: c.data and c.data.startswith("more_jobs:"), ResumeStates.editing_skills)
async def more_jobs_handler(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split(":", 1)[1])
    await callback.answer()
    await send_hh_vacancies(callback.message, state, page=page)

def get_skills_keyboard(skills):
    keyboard = []
    if skills:
        keyboard.append([
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—ã–∫", callback_data="choose_del_skill"),
        ])
    keyboard.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫", callback_data="add_skill"),
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done_skills"),
    ])
    keyboard.append([
        InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="search_jobs"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

def get_del_skill_keyboard(skills):
    keyboard = []
    for skill in skills:
        keyboard.append([
            InlineKeyboardButton(text=f"‚ùå {skill}", callback_data=f"del_skill:{skill}")
        ])
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_skills")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_skills_list(skills):
    if not skills:
        return "<i>–ù–∞–≤—ã–∫–æ–≤ –Ω–µ—Ç</i>"
    return (
        "üìù <b>–í–∞—à–∏ –Ω–∞–≤—ã–∫–∏:</b>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n" +
        "\n".join(f"‚Ä¢ {s}" for s in skills) +
        "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    )

@router.message(ResumeStates.editing_skills, F.text.regexp(r"^/del "))
async def delete_skill_handler(message: Message, state: FSMContext):
    skill_to_del = (message.text[5:].strip() if message.text else "")
    data = await state.get_data()
    skills = data.get("user_skills", []) or []
    if skill_to_del in skills:
        skills.remove(skill_to_del)
        await state.update_data(user_skills=skills)
        await message.answer(f"‚ùå –ù–∞–≤—ã–∫ <b>{skill_to_del}</b> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")
    else:
        await message.answer(f"–ù–∞–≤—ã–∫ <b>{skill_to_del}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.", parse_mode="HTML")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    skills_text = "\n".join(f"‚Ä¢ {s}" for s in skills) if skills else "(–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å)"
    await message.answer(format_skills_list(skills), parse_mode="HTML", reply_markup=get_skills_keyboard(skills))

@router.message(ResumeStates.editing_skills, F.text.regexp(r"^/done$"))
async def done_skills_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    skills = data.get("user_skills", [])
    skills_text = "\n".join(f"‚Ä¢ {s}" for s in skills) if skills else "(–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å)"
    await message.answer(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{skills_text}", parse_mode="HTML")
    # –ù–µ –æ—á–∏—â–∞–µ–º FSM –∏ –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞—ë—Ç—Å—è –≤ ResumeStates.editing_skills
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É:
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ, —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ –∏–ª–∏ —Å—Ä–∞–∑—É –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
        reply_markup=get_skills_keyboard(skills),
        parse_mode="HTML"
    )

@router.message(ResumeStates.editing_skills, F.text)
async def add_skill_handler(message: Message, state: FSMContext):
    new_skill = (message.text.strip() if message.text else "")
    if not new_skill or new_skill.startswith("/"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    data = await state.get_data()
    skills = data.get("user_skills", []) or []
    if new_skill in skills:
        await message.answer(f"–ù–∞–≤—ã–∫ <b>{new_skill}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.", parse_mode="HTML")
    else:
        skills.append(new_skill)
        await state.update_data(user_skills=skills)
        await message.answer(f"‚ûï –ù–∞–≤—ã–∫ <b>{new_skill}</b> –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode="HTML")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    skills_text = "\n".join(f"‚Ä¢ {s}" for s in skills) if skills else "(–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å)"
    await message.answer(format_skills_list(skills), parse_mode="HTML", reply_markup=get_skills_keyboard(skills))

# –ò–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(lambda c: c.data and c.data.startswith("del_skill:"), ResumeStates.editing_skills)
async def inline_delete_skill_handler(callback: types.CallbackQuery, state: FSMContext):
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π callback.data", show_alert=True)
        return
    skill_to_del = callback.data.split(":", 1)[1]
    data = await state.get_data()
    skills = data.get("user_skills", []) or []
    if skill_to_del in skills:
        skills.remove(skill_to_del)
        await state.update_data(user_skills=skills)
        await callback.answer(f"–ù–∞–≤—ã–∫ {skill_to_del} —É–¥–∞–ª—ë–Ω", show_alert=False)
    else:
        await callback.answer(f"–ù–∞–≤—ã–∫ {skill_to_del} –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    skills_text = "\n".join(f"‚Ä¢ {s}" for s in skills) if skills else "(–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å)"
    if callback.message:
        try:
            await callback.message.edit_text(format_skills_list(skills), parse_mode="HTML", reply_markup=get_skills_keyboard(skills))
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise

# –ò–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
@router.callback_query(lambda c: c.data == "add_skill", ResumeStates.editing_skills)
async def inline_add_skill_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.message:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    await state.set_state(ResumeStates.waiting_new_skill)

@router.message(ResumeStates.waiting_new_skill, F.text)
async def add_skill_from_button_handler(message: Message, state: FSMContext):
    new_skill = (message.text.strip() if message.text else "")
    if not new_skill or new_skill.startswith("/"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    data = await state.get_data()
    skills = data.get("user_skills", []) or []
    if new_skill in skills:
        await message.answer(f"–ù–∞–≤—ã–∫ <b>{new_skill}</b> —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.", parse_mode="HTML")
    else:
        skills.append(new_skill)
        await state.update_data(user_skills=skills)
        await message.answer(f"‚ûï –ù–∞–≤—ã–∫ <b>{new_skill}</b> –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode="HTML")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    skills_text = "\n".join(f"‚Ä¢ {s}" for s in skills) if skills else "(–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å)"
    await message.answer(format_skills_list(skills), parse_mode="HTML", reply_markup=get_skills_keyboard(skills))
    await state.set_state(ResumeStates.editing_skills)
            
@router.callback_query(lambda c: c.data == "choose_del_skill", ResumeStates.editing_skills)
async def choose_del_skill_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    skills = data.get("user_skills", []) or []
    if not skills:
        await callback.answer("–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        return
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_del_skill_keyboard(skills)
    )

@router.callback_query(lambda c: c.data == "back_to_skills", ResumeStates.editing_skills)
async def back_to_skills_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    skills = data.get("user_skills", []) or []
    await callback.message.edit_text(
        format_skills_list(skills),
        parse_mode="HTML",
        reply_markup=get_skills_keyboard(skills)
    )

@router.callback_query(lambda c: c.data == "done_skills", ResumeStates.editing_skills)
async def done_skills_button_handler(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º done_skills_handler –∫–∞–∫ –µ—Å–ª–∏ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /done
    data = await state.get_data()
    skills = data.get("user_skills", [])
    skills_text = "\n".join(f"‚Ä¢ {s}" for s in skills) if skills else "(–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å)"
    await callback.message.answer(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{skills_text}", parse_mode="HTML")
    await callback.message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ, —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ –∏–ª–∏ —Å—Ä–∞–∑—É –∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.",
        reply_markup=get_skills_keyboard(skills),
        parse_mode="HTML"
    )
    await callback.answer("–ù–∞–≤—ã–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")
    # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            