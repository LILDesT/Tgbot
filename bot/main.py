# bot/main.py
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from bot.handlers.resume import ResumeStates
from bot.handlers.resume import router as resume_router
from bot.handlers.callbacks import router as callbacks_router
from bot.keyboard import get_start_keyboard
from bot.env import TG_TOKEN

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = Bot(token=TG_TOKEN)
dp = Dispatcher()

dp.include_router(callbacks_router)
logger.info("‚úÖ –†–æ—É—Ç–µ—Ä callbacks –ø–æ–¥–∫–ª—é—á–µ–Ω")
dp.include_router(resume_router)
logger.info("‚úÖ –†–æ—É—Ç–µ—Ä —Ä–µ–∑—é–º–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

@dp.message(CommandStart())
async def start_handler(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id if message.from_user else 'Unknown'}")
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    if args and args[0] == "welcome":
        await message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.\n\n"
            "üìÑ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –≤ PDF ‚Äî "
            "–∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.",
            reply_markup=get_start_keyboard()
        )
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –≤ PDF ‚Äî "
            "–∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.",
            reply_markup=get_start_keyboard()
        )

@dp.message(F.text, ~StateFilter(ResumeStates.editing_skills), ~StateFilter(ResumeStates.waiting_new_skill))
async def any_message_handler(message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id if message.from_user else 'Unknown'}")
    if message.text.startswith('/'):
        logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É")
        return
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard()
    )
