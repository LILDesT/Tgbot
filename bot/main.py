# bot/main.py
import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from bot.env import TG_TOKEN

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
from bot.handlers.resume import router as resume_router
from bot.handlers.callbacks import router as callbacks_router
from bot.keyboard import get_start_keyboard

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TG_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
logger.info("–ü–æ–¥–∫–ª—é—á–∞—é —Ä–æ—É—Ç–µ—Ä—ã...")
dp.include_router(callbacks_router)
logger.info("‚úÖ –†–æ—É—Ç–µ—Ä callbacks –ø–æ–¥–∫–ª—é—á–µ–Ω")
dp.include_router(resume_router)
logger.info("‚úÖ –†–æ—É—Ç–µ—Ä —Ä–µ–∑—é–º–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

@dp.message(CommandStart())
async def start_handler(message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id if message.from_user else 'Unknown'}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã /start
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if args and args[0] == "welcome":
        # –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º welcome
        await message.answer(
            "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.\n\n"
            "üìÑ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –≤ PDF ‚Äî "
            "–∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.",
            reply_markup=get_start_keyboard()
        )
    else:
        # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –≤ PDF ‚Äî "
            "–∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.",
            reply_markup=get_start_keyboard()
        )

@dp.message(F.text)
async def any_message_handler(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id if message.from_user else 'Unknown'}")
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É")
        return
    
    # –î–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
    logger.info("–ü–æ–∫–∞–∑—ã–≤–∞—é —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é")
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard()
    )

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    dp.run_polling(bot)
